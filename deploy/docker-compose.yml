version: '3.8'

#---------------------------------------------------------------------------#
# Used services                                                             #
#---------------------------------------------------------------------------#

services:
#---------------------------------------------------------------------------#
# NiFi webapp                                                               #
#---------------------------------------------------------------------------#
  nifi:
    image: cogstacksystems/cogstack-nifi:dev-latest
    #build: ../nifi/
    container_name: cogstack-nifi
    restart: always
    env_file:
      - ../security/nifi.env
    volumes:
      # INFO: mapping custom development directory
      - ../nifi/devel:/opt/nifi/devel
      - ../nifi/drivers:/opt/nifi/drivers
      # INFO: if there are  local changes, map these content from local host to container
      #       (normally, these 3 directories  below are bundled with our NiFi image)
      - ../nifi/user-templates:/opt/nifi/nifi-current/conf/templates:ro
      #- ../nifi/user-scripts:/opt/nifi/user-scripts:ro
      #- ../nifi/user-schemas:/opt/nifi/user-schemas:ro
      # INFO: uncomment below to map security certificates if need to secure NiFi endpoints
      #- ../security:/opt/nifi/security:ro
      #
      # rest of volumes to persist the state
      # - nifi-vol-conf:/opt/nifi/nifi-current/conf
      # - nifi-vol-logs:/opt/nifi/nifi-current/logs
      # - nifi-vol-provenance:/opt/nifi/nifi-current/provenance_repository
      # - nifi-vol-database:/opt/nifi/nifi-current/database_repository
      # - nifi-vol-flowfiles:/opt/nifi/nifi-current/flowfile_repository
      # - nifi-vol-content:/opt/nifi/nifi-current/content_repository
      # errors generated during data processing
      # - nifi-vol-errors:/opt/nifi/pipeline/flowfile-errors
    ports:
      - "8443:8443"
      # - "8080:8080"
    networks:
      - cognet

#---------------------------------------------------------------------------#
# MySQL container with sample data                                       #
#---------------------------------------------------------------------------#
  mysql:
    image: mysql:8.0.22
    container_name: cogstack-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: c0gs74ck!
      MYSQL_DATABASE: ntvg
    volumes:
      - /Users/stan3/Data/cogstack/ntvg_articles.sql:/docker-entrypoint-initdb.d/file1.sql
    ports:
      - 3306:3306
    networks:
      - cognet

#---------------------------------------------------------------------------#
# NLP Services containers                                                   #
#   * using example free models / resources                                 #
#---------------------------------------------------------------------------#
  medcat:
    image: cogstacksystems/medcat-service:latest
    container_name: cogstack-medcat
    restart: always
    env_file:
      - ../services/nlp-services/applications/medcat/config/env_app_dutch
      - ../services/nlp-services/applications/medcat/config/env_medcat_dutch
    environment:
      - APP_MODEL_NAME=medcat
    volumes:
      - ../services/nlp-services/applications/medcat/models/dutch/cdb.dat:/cat/models/cdb.dat:ro
      - ../services/nlp-services/applications/medcat/models/dutch/vocab.dat:/cat/models/vocab.dat:ro
    ports:
      - 5000:5000
    networks:
      - cognet

#---------------------------------------------------------------------------#
# ElasticSearch cluster                                                     #
#---------------------------------------------------------------------------#
  elasticsearch-1:
    image: amazon/opendistro-for-elasticsearch:1.6.0
    #image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    container_name: cogstack-elasticsearch-1
    restart: always
    environment:
      - cluster.name=docker-cluster
      - discovery.type=single-node
      # INFO: enable 'zen' for multi-node cluster
      # - discovery.type=zen
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1G -Xmx1G"
      # INFO: set 'true' to enable SSL
      - opendistro_security.ssl.http.enabled=false
      #- opendistro_security.ssl.transport.enabled=false
    # volumes:
      # mapping security config
      # INFO: uncomment below to add SSL keys
      #- ../security/root-ca.pem:/usr/share/elasticsearch/config/root-ca.pem:ro
      #- ../security/es-node1.pem:/usr/share/elasticsearch/config/esnode.pem:ro
      #- ../security/es-node1.key:/usr/share/elasticsearch/config/esnode.key:ro
      #- ../security/internal_users.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/internal_users.yml:ro
      #
      # INFO: ES configuration mapped via volume
      #- ../services/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      # ES data persistence
      # - elasticsearch-vol-1:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    expose:
      - 9600
    networks:
      - cognet

#---------------------------------------------------------------------------#
# Kibana webapp                                                             #
#---------------------------------------------------------------------------#
  kibana:
    image: amazon/opendistro-for-elasticsearch-kibana:1.6.0
    #image: docker.elastic.co/kibana/kibana:7.8.0
    container_name: cogstack-kibana
    restart: always
    #env_file: ./security/es_kibana_user.env
    environment:
      # INFO: use HTTPS instead of HTTP when enabled SSL
      ELASTICSEARCH_URL: http://elasticsearch-1:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch-1:9200
      # INFO: uncomment below to enable SSL keys
      SERVER_SSL_ENABLED: "false"
      #SERVER_SSL_KEY: /usr/share/kibana/config/kibana.key
      #SERVER_SSL_CERTIFICATE: /usr/share/kibana/config/kibana.pem
    depends_on:
      - elasticsearch-1
    #volumes:
      # mapping kibana config
      # INFO: uncomment below to add SSL keys
      #- ./security/root-ca.pem:/usr/share/kibana/config/root-ca.pem:ro
      #- ./security/kibana.pem:/usr/share/kibana/config/kibana.pem:ro
      #- ./security/kibana.key:/usr/share/kibana/config/kibana.key:ro
    ports:
      - "5601:5601"
    networks:
      - cognet



#---------------------------------------------------------------------------#
# Docker named volumes                                                      #
#---------------------------------------------------------------------------#
# volumes:
  # ELK-stack related
  # elasticsearch-vol-1:
  #   driver: local

  # NiFi related
  # nifi-vol-conf:
  #   driver: local
  # nifi-vol-logs:
  #   driver: local
  # nifi-vol-provenance:
  #   driver: local
  # nifi-vol-database:
  #   driver: local
  # nifi-vol-flowfiles:
  #   driver: local
  # nifi-vol-content:
  #   driver: local
  # nifi-vol-errors:
  #   driver: local


#---------------------------------------------------------------------------#
# Docker networks.                                                          #
#---------------------------------------------------------------------------#
networks:
  cognet:
    name: cognet
